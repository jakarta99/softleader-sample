package tw.com.softleader.sample.kperson;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

import java.util.Collection;

import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import tw.com.softleader.sample.KPerson.KCompany;
import tw.com.softleader.sample.KPerson.KCompanyService;
import tw.com.softleader.sample.KPerson.KCompanyServiceImpl;


public class KCompanyServiceTest {
	
	private Logger log = LoggerFactory.getLogger(KCompanyServiceTest.class);
	
	private KCompanyService kCompanyService = new KCompanyServiceImpl();

	@Test
	public void testCrud() {
		
		KCompany one = kCompanyService.getOne(1l);
		System.out.println("getOne : " + one);
//		one.setName("Robert_Wang");
//		if (one.getClothes() != null && !one.getClothes().isEmpty()) {
//			Cloth cloth = one.getClothes().stream().findAny().get();
//			cloth.setColor("GREEN");
//		}
//		kCompanyService.update(one);
//		
//		Collection<KPerson> kPersons = kCompanyService.getAll();
//		System.out.println(kPersons);
//		
//		
//		

//		KCompany company = new KCompany();
//		company.setName("FB");
//		company.setId(1L);
//		KPerson newPerson = new KPerson();
//		newPerson.setName("RAYs");
//		newPerson.setIdNo("81");
//		company.setEmps(Arrays.asList(newPerson));
//		Collection<Cloth> clothes = new ArrayList<>();
//		Cloth cloth = new Cloth();
//		cloth.setName("SHIRT");
//		cloth.setColor("WHITE");
//		clothes.add(cloth);
//		Cloth cloth2 = new Cloth();
//		cloth2.setName("SHIRT");
//		cloth2.setColor("BLACK");
//		clothes.add(cloth2);
//		newPerson.setClothes(clothes); 
//		kCompanyService.update(company);
//		Long generatedId = newPerson.getId();
//		System.out.println("generatedId :" + generatedId);
//		kCompanyService.delete(3L);
//		Collection<KCompany> kCompanys = kCompanyService.getAll();
//		System.out.println(kCompanys);
//		
		Collection<KCompany> companys = kCompanyService.getAll();
		int originalSize = companys.size();
		
		
		KCompany company = new KCompany();
		company.setName("SL");
		
		kCompanyService.insert(company);
		log.debug("{}", company);
		
		Long generatedId = company.getId(); // Id was generated by database native.
		
		
		// Try to modify the data
		company.setName("FB");
		kCompanyService.update(company);
		
		
		 KCompany dbEntity = kCompanyService.getOne(generatedId);
		
		assertEquals("FB", dbEntity.getName());
		
		
		kCompanyService.delete(generatedId);
		assertNull(kCompanyService.getOne(generatedId));
		
		
		// check the final size should equals to original size
		companys = kCompanyService.getAll();
		int finalSize = companys.size();
		
		
		assertEquals(originalSize, finalSize);
	}



	
}
